name: CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.1'

jobs:
  setup:
    name: 📦 Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache-dir: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🎯 Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "pnpm-cache-dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm lint

      - name: 📝 Check Prettier formatting
        run: pnpm format --check

  typecheck:
    name: 🔧 Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Run TypeScript compiler
        run: pnpm typecheck

  build:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build packages
        run: pnpm build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          retention-days: 1

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test
        env:
          NODE_ENV: test

  contracts:
    name: 📋 Validate Contracts
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📋 Validate OpenAPI specification
        run: pnpm contracts:check

      - name: 🛠️ Test SDK generation
        run: pnpm sdk:generate

  contracts_dynamic:
    name: 📄 Contracts (Dredd) — Mock Server
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ▶️ Run Dredd against mock server
        run: pnpm contracts:test

      - name: 📎 Upload contracts report
        uses: actions/upload-artifact@v4
        with:
          name: contracts-report
          path: qa/artifacts/contracts-report.json
          if-no-files-found: ignore

  e2e:
    name: 🌐 E2E (Playwright) — Smoke
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧩 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: ▶️ Run E2E smoke (frontend with mocks)
        run: pnpm e2e:ci

      - name: 📎 Upload E2E report
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report
          path: qa/artifacts/e2e-report
          if-no-files-found: ignore

  perf_smoke:
    name: ⚡ Performance Smoke (autocannon)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ▶️ Run perf smoke against mock server
        run: |
          npx start-server-and-test 'node mocks/server.js' http://127.0.0.1:5000 'pnpm perf:smoke'

      - name: 📎 Upload perf report
        uses: actions/upload-artifact@v4
        with:
          name: perf-smoke
          path: qa/artifacts/perf-smoke.json
          if-no-files-found: ignore

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🗄️ Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, test, contracts, contracts_dynamic, e2e, perf_smoke, security]
    if: always()
    steps:
      - name: 📊 Check pipeline status
        run: |
          echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.typecheck.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Contracts (static) | ${{ needs.contracts.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Contracts (Dredd) | ${{ needs.contracts_dynamic.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E | ${{ needs.e2e.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Perf Smoke | ${{ needs.perf_smoke.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Fail if required jobs failed
        if: |
          needs.lint.result == 'failure' ||
          needs.typecheck.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.contracts.result == 'failure' ||
          needs.e2e.result == 'failure'
        run: |
          echo "❌ One or more required jobs failed"
          exit 1

      - name: ✅ Pipeline success
        if: |
          needs.lint.result == 'success' &&
          needs.typecheck.result == 'success' &&
          needs.build.result == 'success' &&
          needs.test.result == 'success' &&
          needs.contracts.result == 'success' &&
          needs.e2e.result == 'success'
        run: |
          echo "✅ All required pipeline jobs completed successfully!"
          echo "🚀 Ready for staging" >> $GITHUB_STEP_SUMMARY
